// This is Prisma schema file,
// docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  CUSTOMER
  PROFESSIONAL
}

enum Currency {
  USD
  UAH
  EUR
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING // Booking was create
  APPROVED // Booking approved by professional
  FINISHED // Booking finished
  REJECTED // Booking rejected by professional
  CANCELED // Booking canceled by user
  MISSED // Booking missed by user, user didn't come
}

// Next Auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  avatar              String?
  firstName           String?
  lastName            String?
  phone               String?       @unique
  name                String?
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  onboardingCompleted Boolean       @default(false)
  isTestingUser       Boolean       @default(false)
  userType            Role?
  companyId           String?
  company             Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  accounts            Account[]
  sessions            Session[]
  bookings            Booking[]
  professional        Professional?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Data models

model Company {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  website   String?
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Professional {
  id         String                  @id @default(cuid())
  userId     String                  @unique
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  facebook   String?
  instagram  String?
  about      String?
  schedule   Schedule[]
  albums     Album[]
  location   Location?
  isBetaUser Boolean                 @default(false)
  services   ServiceOnProfessional[]
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @default(now()) @updatedAt
}

model SmsUsage {
  id        String   @id @default(cuid())
  userId    String
  count     Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id             String       @id @default(cuid())
  name           String
  address        String?
  postalCode     String?
  latitude       Float
  longitude      Float
  professionalId String       @unique
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Schedule {
  id             String       @id @default(cuid())
  start          DateTime
  end            DateTime
  day            Day
  isSpecificDay  Boolean
  specificYear   Int?
  specificMonth  Int?
  specificDay    Int?
  breaks         Break[]
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Break {
  id         String   @id @default(cuid())
  start      DateTime
  end        DateTime
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id            String                  @id @default(cuid())
  name          String
  icon          String
  professionals ServiceOnProfessional[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now()) @updatedAt
  deletedAt     DateTime?
}

model ServiceOnProfessional {
  id             String       @id @default(cuid())
  title          String
  price          Float
  currency       Currency
  duration       Int
  serviceId      String
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Restrict)
  description    String?
  bookings       Booking[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  deletedAt      DateTime?
}

model Portfolio {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String
  albumId     String
  album       Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Album {
  id             String       @id @default(cuid())
  title          String
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  portfolios     Portfolio[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Booking {
  id                    String                @id @default(cuid())
  startTime             DateTime
  endTime               DateTime
  userId                String?
  user                  User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  code                  String                @unique
  guestFirstName        String
  guestLastName         String?
  guestPhone            String
  guestEmail            String?
  guestComment          String?
  status                BookingStatus         @default(PENDING)
  serviceProfessionalId String
  serviceProfessional   ServiceOnProfessional @relation(fields: [serviceProfessionalId], references: [id], onDelete: Cascade)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
}
